name: Publish package to GitHub Packages
on:
  release:
    types: [created]
  push:
    branches:
      - develop
      - master
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
          server-id: github2
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Publish package
        run: mvn --batch-mode deploy
        env:
          MAVEN_USERNAME: isortegahlabs
          MAVEN_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Maven project version
        run: echo ::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: project
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.project.outputs.version }}
          release_name: Release ${{ steps.project.outputs.version }}
          draft: false
          prerelease: false
      - name: Test
        run: ls ./target
      - name: Upload Release Asset
        id: upload-release-assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./target/scala_and_java-${{ steps.project.outputs.version }}.jar
          asset_name: scala_and_java-${{ steps.project.outputs.version }}.jar
          asset_content_type: application/java-archive